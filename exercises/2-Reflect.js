"use strict";

function initializeScript()
{
    return [new host.apiVersionSupport(1, 3)];
}

function logln(s)
{
    host.diagnostics.debugLog(s + "\n");
}

function writeFile(fileName, line)
{
    var file = host.namespace.Debugger.Utility.FileSystem.CreateFile(fileName);
    var textWriter = host.namespace.Debugger.Utility.FileSystem.CreateTextWriter(file);
    textWriter.WriteLine(line);
    file.Close();
}

function tohex(buffer) {
    var result = "";
    for (var i = 0; i < buffer.length; i++) {
        var x = buffer[i].toString(16);
        result += ("00" + x).substr(-2); 
    }
    return result;
}

function invokeScript()
{
    var buffers = [];

    var calls = host.currentSession.TTD.Calls("???");
    
    // Grab all the buffers
    for (var c of calls) 
    {
        var time = c.TimeStart;
        var address = ???;
        var size = ???;
        host.currentProcess.TTD.SetPosition(time);
        var buf = host.memory.readMemoryValues(address, size);
        buffers.push( {'time': time, 'buf': buf} );
    }
    
    // Sort the buffers by time
    buffers.sort((a, b) => (a.time > b.time) ? 1 : -1);

    // This variable will hold the complete dump
    var dump = [];

    // Append all buffers into the dump variable
    for (var buffer of buffers) 
    {
        dump.push(...buffer.buf);
    }

    // Write the dump variable in hex format to a dump file (hex convestion is a weird hack)
    writeFile("???", tohex(dump));
}
